#!/bin/bash
#2345678901234567890123456789012345678901234567890123456789012345678901234567890
# RustXCLib.bash

#2345678901234567890123456789012345678901234567890123456789012345678901234567890
# Constants and Includes

if [[ -z $SAMESHOME ]]
then
    >&2 echo "FATAL:  SAMESHOME not found.  It must be properly defined."
    exit 99
fi

readonly RustBuildName=$SamesProjectName

#readonly RustMainSrcFs=$SamesProjectExtrasDs/rust.main.rs # Preferred usage.  Try this at some point:  NOTE:TBD
readonly RustMainSrcFs=$SamesProjectExtrasDs/rust_main.rs
readonly RustTree=$SamesProjectExtrasDs/rusttree

readonly MainBuildTreeDs=$RustTree/$RustBuildName

readonly MainBuildTreeSrcDs=$MainBuildTreeDs/src
readonly MainBuildTreeTargetDs=$MainBuildTreeDs/target
readonly MainBuildTreeTestsDs=$MainBuildTreeDs/tests

readonly MainBuildTreeDebugDs=$MainBuildTreeTargetDs/debug
readonly MainBuildTreeReleaseDs=$MainBuildTreeTargetDs/release

readonly LibSrcFs=$MainBuildTreeSrcDs/lib.rs
readonly MainSrcFs=$MainBuildTreeSrcDs/main.rs

readonly DebugBinary=$MainBuildTreeDebugDs/$RustBuildName
readonly ReleaseBinary=$MainBuildTreeReleaseDs/$RustBuildName

#2345678901234567890123456789012345678901234567890123456789012345678901234567890
# Internal Procedures

_DeployIfSuccessAndConfigured() {
    local _BuildResult=$1
    local _Deploy="$2"
    local _Release="$3"
    local _SubType="$4"

    local lofs=$SamesBin/rust.main.$_SubType
    if (( $_BuildResult == 0 ))
    then

        if $_Deploy
        then
            rm -f $lofs
            if $_Release
            then
                cp $ReleaseBinary           $lofs
            else
                cp $DebugBinary             $lofs.debugversion
                ln -s $lofs.debugversion    $lofs
            fi
        fi

    fi
}

_PickSubTypeFromMenu() {
    return
}

_PlopRunSource() {
    cp $ProjectLibFs $LibSrcFs
    cp $RustMainSrcFs $MainSrcFs
}

_reCopySourceBackOut() {
    cp $ProjectLibFs $ProjectLibFs.backup.$(date +%Y%m%d%H%M%S)
    cp $LibSrcFs $ProjectLibFs
}

_SetEnvironment() {
    local libSubtype="$1"

    # Crates always Used:
    cargo add regex

    # Crates specific to LibSubtype:
    case "$libSubtype" in
    amateur)
        return 0
        ;;
    native)
        cargo add csv
        return 0
        ;;
    polars)
        cargo add csv
        return 0
        ;;
    spark)
        cargo add csv
        return 0
        ;;
    esac
    return 1
}

#2345678901234567890123456789012345678901234567890123456789012345678901234567890
# Interface Procedures

catUsage() {
    cat <<EOU
USAGE:  $0 <options>
    -C Set Cargo Command "clippy".
    -c Set Cargo Command "check".
    -D Dump Setup Configuration to stdout.
    -d Set Deploy to true.
    -c Set Cargo Command "fmt".
    -h This help text, without errors nor error exit.
    -c Set Cargo Command "run".
    -s Validate library sub-type by checking existince of a Rust file for that
    sub-type.
    -X Clean rust specific buffer files and folders from the project tree.
    -? This help text, without errors nor error exit.
EOU
}

dumpRustBuildEnv() {
    cat <<EODUMP
CargoCmd:       $CargoCmd
LibSubType:     $LibSubtype
OnlyCleanTree:  $OnlyCleanTree
ProjectLibFs:   $ProjectLibFs
Release:        $Release
EODUMP
}

cpResultToSamesBin() {
    local _release=$1

    mkdir -p $SamesBin
    if [[ -n $_release ]]
    then
        cp $MainBuildTreeTargetDs/release/$RustBuildName  $SamesBin
    else
        cp $MainBuildTreeTargetDs/debug/$RustBuildName    $SamesBin
    fi
}

initTree() {
    # CAUTION:  Dangerous Routine Must Be Gentle Here.
    rm -rf $RustTree
    mkdir -p $RustTree
}

reInitWorkingTreeFromExhibitSource() {
    cargo new --vcs none --lib $RustBuildName
    cd $MainBuildTreeDs
    _SetEnvironment
    _PlopRunSource
    cd $MainBuildTreeSrcDs
}

runCargoCmd() {
    local _CargoCmd="$1"
    local _Deploy="$2"
    local _Release="$3"
    local _SubType="$4"

    export CargoCmdQualifiers='--lib'
    if $Release
    then
        export CargoCmdQualifiers="$CargoCmdQualifiers --release"
    fi
    case "$_CargoCmd" in
    build)
        cargo build $CargoCmdQualifiers
        _DeployIfSuccessAndConfigured $? $_Deploy $_Release $_SubType
        ;;
    check)
        cargo check $CargoCmdQualifiers
        ;;
    clippy)
        cargo clippy $CargoCmdQualifiers
        ;;
    fmt)
        cargo fmt $CargoCmdQualifiers
        _reCopySourceBackOut
        ;;
    run)
        cargo run $CargoCmdQualifiers
        _DeployIfSuccessAndConfigured $? $_Deploy $_Release $_SubType
        ;;
    test)
        cargo test $CargoCmdQualifiers
        _DeployIfSuccessAndConfigured $? $_Deploy $_Release $_SubType
        ;;
    esac
}

setInitOptions() {
    local _Option="$1"
    local _optArg="$2"
    
    case "$_Option" in
    C)
        CargoCmd=clippy
        ;;
    c)
        CargoCmd=check
        ;;
    D)
        DumpRustBuildEnvOnly=true
        ;;
    d)
        Deploy=true
        ;;
    f)
        CargoCmd=fmt
        ;;
    h)
        catUsage
        return 1
        ;;
    m)
        # TBD Menu of LibSubtype:
        export LibSubtype=native # for now.
        export LibSubtype=$(pickSubTypeFromMenu) # for now.
        ;;
    r)
        CargoCmd=run
        ;;
    s)
        if validateSubtype "$_optArg"
        then
            export LibSubtype=$_optArg
        else
            echoError "Invalid Library Subtype '$_optArg'."
            catUsage
            return 1
        fi
        ;;
    t)
        CargoCmd=test
        ;;
    X)
        OnlyCleanTree=true
        ;;
    ?)
        catUsage
        return 1
        ;;
    *)
        ;;
    esac
}

#2345678901234567890123456789012345678901234567890123456789012345678901234567890
# End of RustXCLib.bash
